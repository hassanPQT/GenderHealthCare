// <auto-generated />
using System;
using DataAccess.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250613172812_SeedDataRole")]
    partial class SeedDataRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeetingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StaffScheduleId")
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("StaffScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Blog", b =>
                {
                    b.Property<Guid>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublistDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.MenstrualCycle", b =>
                {
                    b.Property<Guid>("MenstrualCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FertilityWindowEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FertilityWindowStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OvulationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PillReminder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenstrualCycleId");

                    b.HasIndex("UserId");

                    b.ToTable("MenstrualCycle", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("cb923e1c-ed85-45a8-bc2f-8b78c60b7e28"),
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = new Guid("d5cf10f1-1f31-4016-ac13-34667e9ca10d"),
                            Name = "Staff"
                        },
                        new
                        {
                            RoleId = new Guid("157f0b62-afbb-44ce-91ce-397239875df5"),
                            Name = "Consultant"
                        },
                        new
                        {
                            RoleId = new Guid("c5b82656-c6a7-49bd-a3fb-3d3e07022d33"),
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.StaffSchedule", b =>
                {
                    b.Property<Guid>("StaffScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("WorkingDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasKey("StaffScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("StaffSchedule", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("MedicalHistory", b =>
                {
                    b.Property<Guid>("MedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MedicalHistoryId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalHistory", (string)null);
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceId");

                    b.ToTable("Service", (string)null);

                    b.HasData(
                        new
                        {
                            ServiceId = new Guid("d220feba-eb1e-47d6-bc88-a044dcd45025"),
                            Description = "Blood test to detect HIV antibodies or antigens.",
                            IsActive = true,
                            Price = 50.0,
                            ServiceName = "HIV Test"
                        },
                        new
                        {
                            ServiceId = new Guid("92156da3-b20c-4b53-b0e4-748adaea4a75"),
                            Description = "Urine or swab test to detect Chlamydia infection.",
                            IsActive = true,
                            Price = 40.0,
                            ServiceName = "Chlamydia Test"
                        },
                        new
                        {
                            ServiceId = new Guid("c87031b9-f5ea-4494-a2f1-65743f194b8d"),
                            Description = "Swab or urine test to diagnose Gonorrhea.",
                            IsActive = true,
                            Price = 40.0,
                            ServiceName = "Gonorrhea Test"
                        },
                        new
                        {
                            ServiceId = new Guid("2bd04214-d426-49c1-b92c-061ca1057aa2"),
                            Description = "Blood test to detect Syphilis infection.",
                            IsActive = true,
                            Price = 45.0,
                            ServiceName = "Syphilis Test"
                        });
                });

            modelBuilder.Entity("TestBooking", b =>
                {
                    b.Property<Guid>("TestBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TestBookingId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("TestBooking", (string)null);
                });

            modelBuilder.Entity("TestResult", b =>
                {
                    b.Property<Guid>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("MedicalHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultDetail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SampleReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TestResultId");

                    b.HasIndex("MedicalHistoryId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResult", (string)null);
                });

            modelBuilder.Entity("DataAccess.Entities.Appointment", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "Consultant")
                        .WithMany("ConsultingAppointments")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Appointment_Consultant");

                    b.HasOne("DataAccess.Entities.StaffSchedule", "StaffSchedule")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_StaffSchedule");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User");

                    b.Navigation("Consultant");

                    b.Navigation("StaffSchedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Blog", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Blog_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.MenstrualCycle", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("MenstrualCycles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenstrualCycle_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Question", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "Consultant")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Question_Consultant");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("QuestionsAsked")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Question_User");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.StaffSchedule", b =>
                {
                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("StaffSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StaffSchedule_Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Feedback", b =>
                {
                    b.HasOne("Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Service");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_User");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalHistory", b =>
                {
                    b.HasOne("Service", "Service")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalHistory_Service");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MedicalHistory_User");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestBooking", b =>
                {
                    b.HasOne("Service", "Service")
                        .WithMany("TestBookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TestBooking_Service");

                    b.HasOne("DataAccess.Entities.User", "Staff")
                        .WithMany("HandledTestBookings")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_TestBooking_Staff");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("TestBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TestBooking_User");

                    b.Navigation("Service");

                    b.Navigation("Staff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TestResult", b =>
                {
                    b.HasOne("MedicalHistory", "MedicalHistory")
                        .WithMany("TestResults")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TestResult_MedicalHistory");

                    b.HasOne("Service", "Service")
                        .WithMany("TestResults")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TestResult_Service");

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("TestResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TestResult_User");

                    b.Navigation("MedicalHistory");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.StaffSchedule", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("AnsweredQuestions");

                    b.Navigation("Appointments");

                    b.Navigation("Blogs");

                    b.Navigation("ConsultingAppointments");

                    b.Navigation("Feedbacks");

                    b.Navigation("HandledTestBookings");

                    b.Navigation("MedicalHistories");

                    b.Navigation("MenstrualCycles");

                    b.Navigation("QuestionsAsked");

                    b.Navigation("StaffSchedules");

                    b.Navigation("TestBookings");

                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("MedicalHistory", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("Service", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("MedicalHistories");

                    b.Navigation("TestBookings");

                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
